
import { serve } from "https://deno.land/std@0.131.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// CORS headers for the function
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }
  
  try {
    // Get API key from environment variable for verification
    const LYGOS_API_KEY = Deno.env.get("LYGOS_API_KEY");
    if (!LYGOS_API_KEY) {
      throw new Error("LYGOS_API_KEY is not configured");
    }

    // Parse request body from Lygos webhook
    const webhookData = await req.json();
    console.log("Received webhook data:", webhookData);
    
    // Verify webhook authenticity (you should implement your verification logic here)
    // For example, checking signature, API key, etc.
    
    // Extract order details
    const { order_id, status } = webhookData;
    
    if (!order_id) {
      throw new Error("Missing order_id in webhook data");
    }
    
    // Create client for Supabase
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Update payment status in the database
    const { data: paymentData, error: paymentError } = await supabase
      .from('payments')
      .update({ 
        status: status === 'success' ? 'completed' : 'failed',
        updated_at: new Date().toISOString()
      })
      .eq('lygos_order_id', order_id)
      .select()
      .single();
    
    if (paymentError) {
      console.error("Error updating payment:", paymentError);
      throw new Error(`Error updating payment: ${paymentError.message}`);
    }
    
    console.log("Payment updated successfully:", paymentData);
    
    // The invitation code will be automatically generated by the database trigger
    
    return new Response(
      JSON.stringify({ success: true }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );
  } catch (error) {
    console.error("Webhook processing error:", error);
    
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      }
    );
  }
});
